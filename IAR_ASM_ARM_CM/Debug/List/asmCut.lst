###############################################################################
#                                                                             #
#     IAR Assembler V8.32.1.169/W32 for ARM 11/Apr/2019  00:01:44             #
#     Copyright 1999-2018 IAR Systems AB.                                     #
#                                                                             #
#           Source file   =  C:\Users\piotr\Documents\programowanieGithub\scc\IAR_ASM_ARM_CM\asmCut.s#
#           List file     =  C:\Users\piotr\Documents\programowanieGithub\scc\IAR_ASM_ARM_CM\Debug\List\asmCut.lst#
#           Object file   =  C:\Users\piotr\Documents\programowanieGithub\scc\IAR_ASM_ARM_CM\Debug\Obj\asmCut.o#
#           Command line  =  -f C:\Users\piotr\AppData\Local\Temp\EW1857.tmp  #
#                            (C:\Users\piotr\Documents\programowanieGithub\scc\IAR_ASM_ARM_CM\asmCut.s #
#                            -OC:\Users\piotr\Documents\programowanieGithub\scc\IAR_ASM_ARM_CM\Debug\Obj #
#                            -s+ -M<> -w+ -r -j                               #
#                            -LC:\Users\piotr\Documents\programowanieGithub\scc\IAR_ASM_ARM_CM\Debug\List #
#                            -cAO -i -B -t2 -xDI2 --cpu Cortex-M0+ --fpu      #
#                            None)                                            #
#                                                                             #
###############################################################################

    1                                   PUBLIC  __iar_program_start

    2                                   PUBLIC  __vector_table

    3                             

    4                                   SECTION .text:CODE:REORDER(4) 
                                 

    5                                   REQUIRE __vector_table;;; Keep vector
                                 table even if it's not referenced

    6                                 

    7                                   

    8                                   THUMB;code16;THUMB

    9                           __iar_program_start

   10                           //==========================================

   11                           //==========================================

   12                           //#include "000_empty.s"

   13                           //#include "00_emptyTemplate.s"

   14                           //#include "00_REG.s"

   15                           //#include "01_B_branch.s"

   16                           //#include "02_BL_branchLink.s"

   17                           //#include "03_immediate.s"

   18                           //#include "04_SWI_debugReturn.s"

   19                           //#include "05_ARM_THUMB_mixed.s"

   20                           //#include "06_CMP_conditional_execution.s"

   21                           //#include "07_gcd()_greatest_common_division.
                                s"

   22                           //#include "08_gcd()_optimized.s"

   23                           //#include "09_LTORG_litPool.s"

   24                           //#include "10_ADR_ADRL_addressGen_addrLoad.s"

   25                           //#include "11_EQU_define.s"

   26                           //#include "12_DCB_strings.s"

   27                           //#include "13_ldrW.s"

   28                           //#include "14_defines.s"

   29                           //#include "15_SECTION.s"

   30                           //#include "16_STM.s"

   31                           //#include "17_r8-r12_highRegisters.s"

   32                           //#include "18_macro.s"

   33                           //#include "19_multiplication.s"

   34                           //#include "20_div.s"

   35                           #include "21_tmpCompiler.s"

    1                           THUMB

    2                           ENTRY:

    3                           main:

    4                           

    5    00000000 184E                  ldr R6, =0x20000200 ;(536871424)

    6    00000002 3746            mov r7,r6

    7                           

    8    00000004 184E                  ldr R6, =0x20000400 ;(536871936)

    9    00000006 B546            mov sp,r6

   10    00000008 00F019F8        bl  _main

   11    0000000C 17E0            b _main

   12                           _0x0:

   13                           

   14    0000000E 174E                  ldr R6, =0xFFFFFFF8 ;(-8)

   15                           

   16    00000010 BE19            adds  r6,r7,r6

   17    00000012 3346            mov r3,r6

   18                           

   19    00000014 164E                  ldr R6, =0xAAAABBBB ;(-1431651397)

   20    00000016 3446            mov r4,r6

   21                           

   22                                 

   23    00000018 0026                  ldr R6, =0x0 ;(0)

   24                           

   25    0000001A F618            adds  r6,r6,r3

   26    0000001C 3460            str r4,[r6]

   27    0000001E 2346            mov r3,r4

   28                           

   29    00000020 144E                  ldr R6, =0xFFFFFFFF ;(-1)

   30    00000022 3346            mov r3,r6

   31    00000024 1846            mov r0,r3

   32                           _0x1:

   33                           

   34    00000026 144E                  ldr R6, =0xFFFFFFFC ;(-4)

   35                           

   36    00000028 3E44            add r6,r7

   37    0000002A 3668            ldr r6,[r6]

   38    0000002C B646            mov lr,r6

   39    0000002E BD46            mov sp,r7

   40                           

   41    00000030 0026                  ldr R6, =0x0 ;(0)

   42                           

   43    00000032 6E44            add r6,sp

   44    00000034 3668            ldr r6,[r6]

   45    00000036 3746            mov r7,r6

   46                           

   47    00000038 0426                  ldr R6, =0x4 ;(4)

   48                           

   49    0000003A B544            add sp,r6,sp

   50    0000003C F746            mov pc,lr

   51                           _main:

   52                           

   53    0000003E 0F4E                  ldr R6, =0xFFFFFFF0 ;(-16)

   54                           

   55    00000040 B544            add sp,r6,sp

   56                           

   57                                 

   58    00000042 0C26                  ldr R6, =0xC ;(12)

   59                           

   60    00000044 6E44            add r6,r6,sp

   61    00000046 3760            str r7,[r6]

   62                           

   63    00000048 0C26                  ldr R6, =0xC ;(12)

   64    0000004A 6E44            add   r6,sp

   65    0000004C 3746            mov r7,r6

   66                           

   67                                 

   68    0000004E 0A4E                  ldr R6, =0xFFFFFFFC ;(-4)

   69                           

   70    00000050 F619            adds  r6,r6,r7

   71                           

   72    00000052 4046              mov r0, r8

   73    00000054 8046                mov r8, r0

   74    00000056 0020                movs r0, #0x0

   75    00000058 7044                add r0, lr

   76    0000005A 3060            str r0,[r6]

   77    0000005C 4046                mov r0, r8

   78    0000005E D6E7            b _0x0

   36                           //#include ""

   37                           //#include ""

   38                           //#include ""

   39                           

   40                           

   41                           //==========================================

   42    00000060 FEE7          loopEnd: B loopEnd

   43                           //==========================================

   44                                   ;; Forward declaration of sections.

   44.1                                  TABLE

   44.2  00000064 00020020              Reference on line 5

   44.3  00000068 00040020              Reference on line 8

   44.4  0000006C F8FFFFFF              Reference on line 14

   44.5  00000070 BBBBAAAA              Reference on line 19

   44.6  00000074 FFFFFFFF              Reference on line 29

   44.7  00000078 FCFFFFFF              Reference on line 34,68

   44.8  0000007C F0FFFFFF              Reference on line 53

   45                                   SECTION CSTACK:DATA:NOROOT(1)

   46                                   SECTION .intvec:CODE:NOROOT(2)

   47                                   PUBLIC NMI_Handler

   48                                   PUBLIC HardFault_Handler       
                                 

   49                                   DATA

   50                           __vector_table

   51    00000000 ........              DCD     sfe(CSTACK)

   52    00000004 ........              DCD     __iar_program_start

   53    00000008 ........              DCD     NMI_Handler

   54    0000000C ........              DCD     HardFault_Handler

   55                           ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                ;;;;;;

   56                               SECTION .text:CODE:REORDER:NOROOT(1)

   57                                   THUMB

   58                           NMI_Handler:

   59                           HardFault_Handler:

   60    00000000 FEE7              B HardFault_Handler

   61                                   END





\n                   DELIMITER 

                     DELIMITER 

!                    OPERATOR 

!=                   OPERATOR 

%                    OPERATOR 

&                    OPERATOR 

&&                   OPERATOR 

(                    OPERATOR 

(                    DELIMITER 

)                    OPERATOR 

)                    DELIMITER 

*                    OPERATOR 

+                    OPERATOR 

,                    DELIMITER 

-                    OPERATOR 

.                    Target symbol: 24 

/                    OPERATOR 

/                    DELIMITER 

:                    Target symbol: 22 

:                    DELIMITER 

:AND:                OPERATOR 

:EOR:                OPERATOR 

:LAND:               OPERATOR 

:LEOR:               OPERATOR 

:LNOT:               OPERATOR 

:LOR:                OPERATOR 

:MOD:                OPERATOR 

:NOT:                OPERATOR 

:OR:                 OPERATOR 

:SHL:                OPERATOR 

:SHR:                OPERATOR 

;                    Target symbol: 23 

<                    OPERATOR 

<<                   OPERATOR 

<=                   OPERATOR 

<>                   OPERATOR 

=                    OPERATOR 

=                    DIRECTIVE 

==                   OPERATOR 

>                    OPERATOR 

>=                   OPERATOR 

>>                   OPERATOR 

@                    DELIMITER 

A1                   REGISTER 

A2                   REGISTER 

A3                   REGISTER 

A4                   REGISTER 

AAPCS                DIRECTIVE 

ALIAS                DIRECTIVE 

ALIGN                DIRECTIVE 

ALIGNRAM             DIRECTIVE 

ALIGNROM             DIRECTIVE 

ANOTE                DIRECTIVE 

ARGFRAME             DIRECTIVE 

ARM                  DIRECTIVE 

ASEGN                DIRECTIVE 

BIT                  SEGMENT TYPE 

BYTE1                OPERATOR 

BYTE2                OPERATOR 

BYTE3                OPERATOR 

BYTE4                OPERATOR 

C0                   REGISTER 

C1                   REGISTER 

C10                  REGISTER 

C11                  REGISTER 

C12                  REGISTER 

C13                  REGISTER 

C14                  REGISTER 

C15                  REGISTER 

C2                   REGISTER 

C3                   REGISTER 

C4                   REGISTER 

C5                   REGISTER 

C6                   REGISTER 

C7                   REGISTER 

C8                   REGISTER 

C9                   REGISTER 

CALL_GRAPH_ROOT      DIRECTIVE 

CASEOFF              DIRECTIVE 

CASEON               DIRECTIVE 

CBREL                OPERATOR 

CBREL_NEAR           OPERATOR 

CFI                  DIRECTIVE 

CODE                 SEGMENT TYPE 

CODE                 DIRECTIVE 

CODE16               DIRECTIVE 

CODE32               DIRECTIVE 

COL                  DIRECTIVE 

CONST                SEGMENT TYPE 

DATA                 SEGMENT TYPE 

DATA                 DIRECTIVE 

DATA16               DIRECTIVE 

DATA32               DIRECTIVE 

DATA64               DIRECTIVE 

DATA8                DIRECTIVE 

DATE                 OPERATOR 

DC16                 DIRECTIVE 

DC24                 DIRECTIVE 

DC32                 DIRECTIVE 

DC64                 DIRECTIVE 

DC8                  DIRECTIVE 

DCB                  DIRECTIVE 

DCD                  DIRECTIVE 

DCREL32              DIRECTIVE 

DCW                  DIRECTIVE 

DEFINE               DIRECTIVE 

DF32                 DIRECTIVE 

DF64                 DIRECTIVE 

DS16                 DIRECTIVE 

DS24                 DIRECTIVE 

DS32                 DIRECTIVE 

DS64                 DIRECTIVE 

DS8                  DIRECTIVE 

ELSE                 DIRECTIVE 

ELSEIF               DIRECTIVE 

END                  DIRECTIVE 

ENDIF                DIRECTIVE 

ENDM                 DIRECTIVE 

ENDMOD               DIRECTIVE 

ENDR                 DIRECTIVE 

EQU                  DIRECTIVE 

EVEN                 DIRECTIVE 

EXCEPTION_CODE       DIRECTIVE 

EXITM                DIRECTIVE 

EXPORT               DIRECTIVE 

EXTERN               DIRECTIVE 

EXTWEAK              DIRECTIVE 

FAR                  SEGMENT TYPE 

FARCODE              SEGMENT TYPE 

FARCONST             SEGMENT TYPE 

FARDATA              SEGMENT TYPE 

FP                   REGISTER 

FUNCALL              DIRECTIVE 

FUNCTION             DIRECTIVE 

HIGH                 OPERATOR 

HUGE                 SEGMENT TYPE 

HUGECODE             SEGMENT TYPE 

HUGECONST            SEGMENT TYPE 

HUGEDATA             SEGMENT TYPE 

HWRD                 OPERATOR 

IDATA                SEGMENT TYPE 

IF                   DIRECTIVE 

IMPORT               DIRECTIVE 

INCLUDE              DIRECTIVE 

IP                   REGISTER 

LIBRARY              DIRECTIVE 

LOCAL                DIRECTIVE 

LOCFRAME             DIRECTIVE 

LOW                  OPERATOR 

LR                   REGISTER 

LSTCND               DIRECTIVE 

LSTCOD               DIRECTIVE 

LSTEXP               DIRECTIVE 

LSTMAC               DIRECTIVE 

LSTOUT               DIRECTIVE 

LSTPAG               DIRECTIVE 

LSTREP               DIRECTIVE 

LSTXRF               DIRECTIVE 

LTORG                DIRECTIVE 

LWRD                 OPERATOR 

MACRO                DIRECTIVE 

MODULE               DIRECTIVE 

NAME                 DIRECTIVE 

NEAR                 SEGMENT TYPE 

NEARCODE             SEGMENT TYPE 

NEARCONST            SEGMENT TYPE 

NEARDATA             SEGMENT TYPE 

NOALLOC              SEGMENT TYPE 

NOCALL               DIRECTIVE 

NOROOT               SEGMENT TYPE 

NPAGE                SEGMENT TYPE 

ODD                  DIRECTIVE 

P0                   REGISTER 

P1                   REGISTER 

P10                  REGISTER 

P11                  REGISTER 

P12                  REGISTER 

P13                  REGISTER 

P14                  REGISTER 

P15                  REGISTER 

P2                   REGISTER 

P3                   REGISTER 

P4                   REGISTER 

P5                   REGISTER 

P6                   REGISTER 

P7                   REGISTER 

P8                   REGISTER 

P9                   REGISTER 

PAGE                 DIRECTIVE 

PAGSIZ               DIRECTIVE 

PC                   REGISTER 

PRESERVE8            DIRECTIVE 

PROGRAM              DIRECTIVE 

PUBLIC               DIRECTIVE 

PUBWEAK              DIRECTIVE 

R0                   REGISTER 

R1                   REGISTER 

R10                  REGISTER 

R11                  REGISTER 

R12                  REGISTER 

R13                  REGISTER 

R14                  REGISTER 

R15                  REGISTER 

R2                   REGISTER 

R3                   REGISTER 

R4                   REGISTER 

R5                   REGISTER 

R6                   REGISTER 

R7                   REGISTER 

R8                   REGISTER 

R9                   REGISTER 

RADIX                DIRECTIVE 

REGISTER             SEGMENT TYPE 

RELOC_ARM_PREL31     OPERATOR 

RELOC_ARM_TARGET1    OPERATOR 

RELOC_ARM_TARGET2    OPERATOR 

RELOC_LOCAL          OPERATOR 

REORDER              SEGMENT TYPE 

REPT                 DIRECTIVE 

REPTC                DIRECTIVE 

REPTI                DIRECTIVE 

REQUIRE              DIRECTIVE 

REQUIRE8             DIRECTIVE 

ROOT                 SEGMENT TYPE 

RSEG                 DIRECTIVE 

RTMODEL              DIRECTIVE 

SB                   REGISTER 

SBREL                OPERATOR 

SBREL_NEAR           OPERATOR 

SECTION              DIRECTIVE 

SECTION_GROUP        DIRECTIVE 

SECTION_LINK         DIRECTIVE 

SECTION_TYPE         DIRECTIVE 

SET                  DIRECTIVE 

SETA                 DIRECTIVE 

SFB                  OPERATOR 

SFE                  OPERATOR 

SFS                  OPERATOR 

SIZE                 DIRECTIVE 

SIZEOF               OPERATOR 

SL                   REGISTER 

SORT                 SEGMENT TYPE 

SP                   REGISTER 

THUMB                DIRECTIVE 

THUMBX               DIRECTIVE 

TLS                  SEGMENT TYPE 

TLS                  OPERATOR 

UGT                  OPERATOR 

ULT                  OPERATOR 

UNTYPED              SEGMENT TYPE 

V1                   REGISTER 

V2                   REGISTER 

V3                   REGISTER 

V4                   REGISTER 

V5                   REGISTER 

V6                   REGISTER 

V7                   REGISTER 

VAR                  DIRECTIVE 

XDATA                SEGMENT TYPE 

XOR                  OPERATOR 

ZPAGE                SEGMENT TYPE 

[                    DELIMITER 

]                    DELIMITER 

^                    OPERATOR 

^                    DELIMITER 

__ARM4TM__           #define, value: 4, line:         0  

__ARM5TM__           #define, value: 5, line:         0  

__ARM5T__            #define, value: 5, line:         0  

__ARM5__             #define, value: 5, line:         0  

__ARM6M__            #define, value: 11, line:         0  

__ARM6SM__           #define, value: 12, line:         0  

__ARM6__             #define, value: 6, line:         0  

__ARM_32BIT_STATE    #define, value: 1, line:         0  

__ARM_ARCH           #define, value: 6, line:         0  

__ARM_ARCH_ISA_THUMB #define, value: 1, line:         0  

__ARM_ARCH_PROFILE   #define, value: 'M', line:         0  

__ARM_PROFILE_M__    #define, value: 1, line:         0  

__BUILD_NUMBER__     #define,            line:         0  

__CORE__             #define, value: __ARM6M__, line:         0  

__DATE__             #define,            line:         0  

__FILE__             #define,            line:         0  

__IAR_SYSTEMS_ASM    #define,            line:         0  

__IAR_SYSTEMS_ASM__  #define,            line:         0  

__IASMARM__          #define, value: 1, line:         0  

__LINE__             #define,            line:         0  

__LITTLE_ENDIAN__    #define, value: 1, line:         0  

__SUBVERSION__       #define,            line:         0  

__TID__              #define,            line:         0  

__TIME__             #define,            line:         0  

__VER__              #define,            line:         0  

define               PREPROCESSOR DIRECTIVE 

defined              Target symbol: 0 

elif                 PREPROCESSOR DIRECTIVE 

else                 PREPROCESSOR DIRECTIVE 

endif                PREPROCESSOR DIRECTIVE 

error                PREPROCESSOR DIRECTIVE 

if                   PREPROCESSOR DIRECTIVE 

ifdef                PREPROCESSOR DIRECTIVE 

ifndef               PREPROCESSOR DIRECTIVE 

include              PREPROCESSOR DIRECTIVE 

line                 PREPROCESSOR DIRECTIVE 

message              PREPROCESSOR DIRECTIVE 

pragma               PREPROCESSOR DIRECTIVE 

undef                PREPROCESSOR DIRECTIVE 

{                    DELIMITER 

|                    OPERATOR 

||                   OPERATOR 

}                    DELIMITER 

~                    OPERATOR 

EOF                  DELIMITER 



Segment             Type 	Mode

----------------------------------------

.intvec             CODE  	REL 

.text               CODE  	REL 

CSTACK              DATA  	REL 

__EXTERNS           CODE  	ABS Org:0 



Label               Mode   Type                   Segment    Value/Offset

------------------------------------------------------------------------------

??DUMMY_SYMBOL_IN_BACKEND_PARSED_OPERANDS
                    ABS    CONST UNTYP.           ASEG       1267 

ENTRY               REL    CONST UNTYP.           .text      1 

HardFault_Handler   REL    CONST PUB UNTYP.       .text      1 

NMI_Handler         REL    CONST PUB UNTYP.       .text      1 

THUMB               REL    CONST UNTYP.           .text      1 

TID                 ABS    CONST UNTYP.           ASEG       4F00 

_0x0                REL    CONST UNTYP.           .text      F 

_0x1                REL    CONST UNTYP.           .text      27 

__iar_program_start REL    CONST PUB UNTYP.       .text      1 

__lab0              REL    CONST UNTYP.           .text      64 

__lab1              REL    CONST UNTYP.           .text      68 

__lab2              REL    CONST UNTYP.           .text      6C 

__lab3              REL    CONST UNTYP.           .text      70 

__lab4              REL    CONST UNTYP.           .text      74 

__lab5              REL    CONST UNTYP.           .text      78 

__lab6              REL    CONST UNTYP.           .text      7C 

__vector_table      REL    CONST PUB UNTYP.       .intvec    0 

_main               REL    CONST UNTYP.           .text      3F 

loopEnd             REL    CONST UNTYP.           .text      61 

main                REL    CONST UNTYP.           .text      1 





##############################
#           CRC:0            #
#        Errors:   0         #
#        Warnings: 0         #
#         Bytes: 146         #
##############################



